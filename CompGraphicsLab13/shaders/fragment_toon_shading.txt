#version 330 core

uniform struct PointLight{
	vec4 position;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 attenuation;
} light;
uniform struct Material{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 emission;
	float shininess;
	vec4 color_obj;
} material;

in struct Vertex {
	vec2 texcoord;
	vec3 normal;
	vec3 lightDir;
	vec3 viewDir;
	float distance;
} Vert;
uniform sampler2D ourTexture;
void main() {
	vec3 normal = normalize(Vert.normal);
	vec3 lightDir = normalize(Vert.lightDir);
	
	float diff = 0.2 + max(dot(normal, lightDir), 0.0);
	vec4 color = vec4(1.0);
    if(diff < 0.4)
        color = material.diffuse * 0.3;
    else if(diff < 0.7)
        color = material.diffuse;
    else
        color = material.diffuse * 1.3;
	
	gl_FragColor = color  * texture(ourTexture, Vert.texcoord); 
}