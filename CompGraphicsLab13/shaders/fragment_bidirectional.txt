#version 330 core

uniform struct PointLight{
	vec4 position;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 attenuation;
} light;
uniform struct Material{
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 emission;
	float shininess;
	vec4 color_obj;
} material;

in struct Vertex {
	vec2 texcoord;
	vec3 normal;
	vec3 lightDir;
	vec3 viewDir;
	float distance;
} Vert;
uniform sampler2D ourTexture;
void main() {
	const vec4 color0 = vec4(1.0, 0.0, 0.0, 1.0);
	const vec4 color2 = vec4(0.0, 1.0, 0.0, 1.0);
	vec3 n2 = normalize(vec3(Vert.normal));
	vec3 l2 = normalize(vec3(Vert.lightDir));
	vec4 diff = color0 * max(dot(n2, l2), 0.0) + color2 * max(dot(n2, -l2), 0.0);
	gl_FragColor = diff * texture(ourTexture, Vert.texcoord);
}